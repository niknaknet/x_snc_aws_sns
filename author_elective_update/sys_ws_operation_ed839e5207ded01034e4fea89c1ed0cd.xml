<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="DELETE">
        <active>true</active>
        <consumes/>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>workspacecreated</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var state = {'pending': '0', 
				 'subscribed': '1', 
				 'unsubscribed': '2'};
	var table = {'subscription': 'x_snc_aws_sns_subscription',
				 'handler': 'x_snc_aws_sns_handler',
				 'bundles': 'x_snc_aws_sns_bundles',
				 'subscriptionToHandler': 'x_snc_aws_sns_m2m_handlers_subscriptions'};
	
	// Primary logic
	var type = request.getHeader('x-amz-sns-message-type');
	var topicArn = request.getHeader('x-amz-sns-topic-arn');
	var subscriptionGr = new GlideRecord(table.subscription);
	var haveSubscription = subscriptionGr.get('topic_arn', topicArn);
	var requestObj = getRequestObject();

	if (type == 'Notification' && haveSubscription) {
		notification();
	} else if (type == 'SubscriptionConfirmation' && !haveSubscription) {
		subscriptionConfirmation();
	} else if (type == 'UnsubscribeConfirmation' && haveSubscription) {
		unsubscribeConfirmation();
	}
	
	// Functions
	function subscriptionConfirmation() {
		var arnParts = topicArn.split(':');
		var topicName = arnParts[arnParts.length - 1];
		subscriptionGr.setValue('name', topicName);
		subscriptionGr.setValue('state', state.pending);
		subscriptionGr.setValue('topic_arn', topicArn);
		subscriptionGr.setValue('subscribe_url', requestObj.SubscribeURL);
		subscriptionGr.insert();
	}
	
	function unsubscribeConfirmation() {
		subscriptionGr.setValue('state', state.unsubscribed);
		subscriptionGr.setValue('subscribe_url', requestObj.SubscribeURL);
		subscriptionGr.update();
	}
	
	function notification() {
		var message = JSON.parse(requestObj.Message);

		if (!subscriptionGr.getValue('unsubscribe_url')) {
			subscriptionGr.setValue('unsubscribe_url', requestObj.UnsubscribeURL);
			subscriptionGr.update();
		}
		
// implement the update to the workspaces table...
/* Sample message:


*/
		
		var subToHandlerGr = new GlideRecord(table.subscriptionToHandler);
		subToHandlerGr.addQuery('subscription', subscriptionGr.sys_id);
		subToHandlerGr.addQuery('active', true);
		subToHandlerGr.orderBy('order');
		subToHandlerGr.query();
		while (subToHandlerGr.next()) {
			var handlerGr = new GlideRecord(table.handler);
			handlerGr.get(subToHandlerGr.handler);
			var evaluator = new GlideScopedEvaluator();
			evaluator.putVariable('message', message);
			evaluator.evaluateScript(handlerGr, 'script');
		}
	}
	
	function getRequestObject() {
		var reader = new GlideTextReader(request.body.dataStream);
		var requestString = '';
		var line = '';
		while((line = reader.readLine()) != null) {  
			requestString += line;  
		}
		gs.info('requestString: ' + requestString);
		return JSON.parse(requestString);
	}
})(request, response);]]></operation_script>
        <operation_uri/>
        <produces/>
        <produces_customized>false</produces_customized>
        <relative_path>/workspacecreated</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-31 14:02:39</sys_created_on>
        <sys_id>ed839e5207ded01034e4fea89c1ed0cd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>workspacecreated</sys_name>
        <sys_package display_value="AWS SNS" source="x_snc_aws_sns">24cd01fe13391f006b9054c32244b0f3</sys_package>
        <sys_policy/>
        <sys_scope display_value="AWS SNS">24cd01fe13391f006b9054c32244b0f3</sys_scope>
        <sys_update_name>sys_ws_operation_ed839e5207ded01034e4fea89c1ed0cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-31 14:02:39</sys_updated_on>
        <web_service_definition/>
        <web_service_version/>
    </sys_ws_operation>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="AWS SNS">24cd01fe13391f006b9054c32244b0f3</application>
        <file_path/>
        <instance_id>4b6b0da5db47c8182f68c5970596196b</instance_id>
        <instance_name>dev101171</instance_name>
        <name>sys_ws_operation_ed839e5207ded01034e4fea89c1ed0cd</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes/&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri/&gt;&lt;enforce_acl&gt;cf9d01d3e73003009d6247e603f6a990&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;workspacecreated&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var state = {'pending': '0', 
				 'subscribed': '1', 
				 'unsubscribed': '2'};
	var table = {'subscription': 'x_snc_aws_sns_subscription',
				 'handler': 'x_snc_aws_sns_handler',
				 'bundles': 'x_snc_aws_sns_bundles',
				 'subscriptionToHandler': 'x_snc_aws_sns_m2m_handlers_subscriptions'};
	
	// Primary logic
	var type = request.getHeader('x-amz-sns-message-type');
	var topicArn = request.getHeader('x-amz-sns-topic-arn');
	var subscriptionGr = new GlideRecord(table.subscription);
	var haveSubscription = subscriptionGr.get('topic_arn', topicArn);
	var requestObj = getRequestObject();

	if (type == 'Notification' &amp;&amp; haveSubscription) {
		notification();
	} else if (type == 'SubscriptionConfirmation' &amp;&amp; !haveSubscription) {
		subscriptionConfirmation();
	} else if (type == 'UnsubscribeConfirmation' &amp;&amp; haveSubscription) {
		unsubscribeConfirmation();
	}
	
	// Functions
	function subscriptionConfirmation() {
		var arnParts = topicArn.split(':');
		var topicName = arnParts[arnParts.length - 1];
		subscriptionGr.setValue('name', topicName);
		subscriptionGr.setValue('state', state.pending);
		subscriptionGr.setValue('topic_arn', topicArn);
		subscriptionGr.setValue('subscribe_url', requestObj.SubscribeURL);
		subscriptionGr.insert();
	}
	
	function unsubscribeConfirmation() {
		subscriptionGr.setValue('state', state.unsubscribed);
		subscriptionGr.setValue('subscribe_url', requestObj.SubscribeURL);
		subscriptionGr.update();
	}
	
	function notification() {
		var message = JSON.parse(requestObj.Message);

		if (!subscriptionGr.getValue('unsubscribe_url')) {
			subscriptionGr.setValue('unsubscribe_url', requestObj.UnsubscribeURL);
			subscriptionGr.update();
		}
		
// implement the update to the workspaces table...
/* Sample message:


*/
		
		var subToHandlerGr = new GlideRecord(table.subscriptionToHandler);
		subToHandlerGr.addQuery('subscription', subscriptionGr.sys_id);
		subToHandlerGr.addQuery('active', true);
		subToHandlerGr.orderBy('order');
		subToHandlerGr.query();
		while (subToHandlerGr.next()) {
			var handlerGr = new GlideRecord(table.handler);
			handlerGr.get(subToHandlerGr.handler);
			var evaluator = new GlideScopedEvaluator();
			evaluator.putVariable('message', message);
			evaluator.evaluateScript(handlerGr, 'script');
		}
	}
	
	function getRequestObject() {
		var reader = new GlideTextReader(request.body.dataStream);
		var requestString = '';
		var line = '';
		while((line = reader.readLine()) != null) {  
			requestString += line;  
		}
		gs.info('requestString: ' + requestString);
		return JSON.parse(requestString);
	}
})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri/&gt;&lt;produces/&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/workspacecreated&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description/&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-07-31 14:02:39&lt;/sys_created_on&gt;&lt;sys_id&gt;ed839e5207ded01034e4fea89c1ed0cd&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;workspacecreated&lt;/sys_name&gt;&lt;sys_package display_value="AWS SNS" source="x_snc_aws_sns"&gt;24cd01fe13391f006b9054c32244b0f3&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="AWS SNS"&gt;24cd01fe13391f006b9054c32244b0f3&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_ed839e5207ded01034e4fea89c1ed0cd&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-07-31 14:02:39&lt;/sys_updated_on&gt;&lt;web_service_definition/&gt;&lt;web_service_version/&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
        <payload_hash>305225313</payload_hash>
        <record_name>workspacecreated</record_name>
        <reverted_from/>
        <source>47075042075a901034e4fea89c1ed01f</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-31 14:02:39</sys_created_on>
        <sys_id>f2b31e1207ded01034e4fea89c1ed0dc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>173a52e93450000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-31 14:02:39</sys_updated_on>
        <type>Scripted REST Resource</type>
        <update_guid>3eb31e12b5ded0103fc2587421ae65db</update_guid>
        <update_guid_history>3eb31e12b5ded0103fc2587421ae65db:305225313</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-31 14:03:15</sys_created_on>
        <sys_db_object display_value="" name="sys_ws_operation">sys_ws_operation</sys_db_object>
        <sys_id>a75ffcb4b527426c95c176477e067810</sys_id>
        <sys_metadata>ed839e5207ded01034e4fea89c1ed0cd</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>workspacecreated</sys_name>
        <sys_package display_value="AWS SNS" source="x_snc_aws_sns">24cd01fe13391f006b9054c32244b0f3</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="AWS SNS">24cd01fe13391f006b9054c32244b0f3</sys_scope>
        <sys_scope_delete display_value="">378c22e3814c44ecbc024f54246ab810</sys_scope_delete>
        <sys_update_name>sys_ws_operation_ed839e5207ded01034e4fea89c1ed0cd</sys_update_name>
        <sys_update_version display_value="sys_ws_operation_ed839e5207ded01034e4fea89c1ed0cd">f2b31e1207ded01034e4fea89c1ed0dc</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-31 14:03:15</sys_updated_on>
    </sys_metadata_delete>
</record_update>
